% FIR filter design with Python and SciPy
% Matti Pastell
% 15th April 2013



# Baseline Model Run

We can run our baseline model with `python 3`

```python, term=True
from subprocess import call, check_output
check_output(["python3", "baseline_model.py", "-conf", "testBaseline.config"])
```
```python, term=True
from subprocess import call, check_output
check_output(["python3", "evaluation_test.py", "-conf", "testBaseline.config"])
```
## Lowpass FIR filter

Designing a lowpass FIR filter is very simple to do with SciPy, all you
need to do is to define the window length, cut off frequency and the
window.

The Hamming window is defined as:
$w(n) = \alpha - \beta\cos\frac{2\pi n}{N-1}$, where $\alpha=0.54$ and $\beta=0.46$

The next code chunk is executed in term mode, see the [Python script](FIR_design.py) for syntax.
Notice also that Pweave can now catch multiple figures/code chunk.


```python, term=True
n = 61
a = signal.firwin(n, cutoff = 0.3, window = "hamming")
#Frequency and phase response
mfreqz(a)
#Impulse and step response
impz(a)
```

## Highpass FIR Filter

Let's define a highpass FIR filter, if you compare to original blog
post you'll notice that it has become easier since 2009. You don't
need to do ' spectral inversion "manually" anymore!


```python
n = 101
a = signal.firwin(n, cutoff = 0.3, window = "hanning", pass_zero=False)
mfreqz(a)
```

## Bandpass FIR filter

Notice that the plot has a caption defined in code chunk options.


```python, caption="Bandpass FIR filter."
n = 1001
a = signal.firwin(n, cutoff = [0.2, 0.5], window = 'blackmanharris', pass_zero = False)
mfreqz(a)
```
